<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" ignored="0" total="16" passed="14">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="38433" started-at="2022-03-27T18:58:48 GST" finished-at="2022-03-27T18:59:26 GST">
    <groups>
    </groups>
    <test name="Test" duration-ms="38433" started-at="2022-03-27T18:58:48 GST" finished-at="2022-03-27T18:59:26 GST">
      <class name="tests.booking.UpdateBookingTest">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.booking.UpdateBookingTest@210366b4]" name="setup" is-config="true" duration-ms="1" started-at="2022-03-27T18:59:07 GST" finished-at="2022-03-27T18:59:07 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="baseTest()[pri:0, instance:tests.booking.UpdateBookingTest@210366b4]" name="baseTest" is-config="true" duration-ms="0" started-at="2022-03-27T18:59:07 GST" finished-at="2022-03-27T18:59:07 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseTest -->
        <test-method status="PASS" signature="getAllBookings()[pri:0, instance:tests.booking.UpdateBookingTest@210366b4]" name="getAllBookings" duration-ms="1333" started-at="2022-03-27T18:59:07 GST" finished-at="2022-03-27T18:59:09 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllBookings -->
        <test-method status="PASS" signature="getBooking()[pri:0, instance:tests.booking.UpdateBookingTest@210366b4]" name="getBooking" duration-ms="2590" started-at="2022-03-27T18:59:09 GST" finished-at="2022-03-27T18:59:11 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBooking -->
        <test-method status="PASS" signature="patchBooking()[pri:0, instance:tests.booking.UpdateBookingTest@210366b4]" name="patchBooking" duration-ms="4884" started-at="2022-03-27T18:59:11 GST" finished-at="2022-03-27T18:59:16 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- patchBooking -->
        <test-method status="FAIL" signature="patchWithNoToken()[pri:0, instance:tests.booking.UpdateBookingTest@210366b4]" name="patchWithNoToken" duration-ms="2657" started-at="2022-03-27T18:59:16 GST" finished-at="2022-03-27T18:59:19 GST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[2 expectations failed.
Expected status code <200> but was <403>.

Expected content-type "JSON" doesn't match actual content-type "text/plain; charset=utf-8".
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 2 expectations failed.
Expected status code <200> but was <403>.

Expected content-type "JSON" doesn't match actual content-type "text/plain; charset=utf-8".

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1656)
at sun.reflect.GeneratedMethodAccessor82.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1262)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1029)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:816)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1661)
at sun.reflect.GeneratedMethodAccessor81.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1262)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1029)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:816)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.patch(RequestSpecificationImpl.groovy:191)
at io.restassured.internal.RequestSpecificationImpl.patch(RequestSpecificationImpl.groovy)
at tests.booking.UpdateBookingTest.patchWithNoToken(UpdateBookingTest.java:91)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:73)
at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- patchWithNoToken -->
        <test-method status="PASS" signature="updateBooking()[pri:0, instance:tests.booking.UpdateBookingTest@210366b4]" name="updateBooking" duration-ms="4050" started-at="2022-03-27T18:59:19 GST" finished-at="2022-03-27T18:59:23 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateBooking -->
        <test-method status="FAIL" signature="updateWithNoToken()[pri:0, instance:tests.booking.UpdateBookingTest@210366b4]" name="updateWithNoToken" duration-ms="2179" started-at="2022-03-27T18:59:23 GST" finished-at="2022-03-27T18:59:25 GST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[2 expectations failed.
Expected status code <200> but was <403>.

Expected content-type "JSON" doesn't match actual content-type "text/plain; charset=utf-8".
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 2 expectations failed.
Expected status code <200> but was <403>.

Expected content-type "JSON" doesn't match actual content-type "text/plain; charset=utf-8".

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1656)
at sun.reflect.GeneratedMethodAccessor82.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1262)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1029)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:816)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1661)
at sun.reflect.GeneratedMethodAccessor81.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1262)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1029)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:816)
at io.restassured.internal.RequestSpecificationImpl.invokeMethod(RequestSpecificationImpl.groovy)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.put(RequestSpecificationImpl.groovy:179)
at io.restassured.internal.RequestSpecificationImpl.put(RequestSpecificationImpl.groovy)
at tests.booking.UpdateBookingTest.updateWithNoToken(UpdateBookingTest.java:103)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:73)
at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateWithNoToken -->
        <test-method status="PASS" signature="after()[pri:0, instance:tests.booking.UpdateBookingTest@210366b4]" name="after" is-config="true" duration-ms="1" started-at="2022-03-27T18:59:25 GST" finished-at="2022-03-27T18:59:25 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- tests.booking.UpdateBookingTest -->
      <class name="tests.authenticate.AuthFailureTest">
        <test-method status="PASS" signature="baseTest()[pri:0, instance:tests.authenticate.AuthFailureTest@185d8b6]" name="baseTest" is-config="true" duration-ms="1" started-at="2022-03-27T18:58:51 GST" finished-at="2022-03-27T18:58:51 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseTest -->
        <test-method status="PASS" signature="init()[pri:0, instance:tests.authenticate.AuthFailureTest@185d8b6]" name="init" is-config="true" duration-ms="5" started-at="2022-03-27T18:58:51 GST" finished-at="2022-03-27T18:58:51 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="LoginWithInvalidCred()[pri:0, instance:tests.authenticate.AuthFailureTest@185d8b6]" name="LoginWithInvalidCred" duration-ms="1623" started-at="2022-03-27T18:58:51 GST" finished-at="2022-03-27T18:58:53 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginWithInvalidCred -->
        <test-method status="PASS" signature="LoginWithInvalidPassword()[pri:0, instance:tests.authenticate.AuthFailureTest@185d8b6]" name="LoginWithInvalidPassword" duration-ms="1425" started-at="2022-03-27T18:58:53 GST" finished-at="2022-03-27T18:58:55 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginWithInvalidPassword -->
        <test-method status="PASS" signature="LoginWithInvalidUserName()[pri:0, instance:tests.authenticate.AuthFailureTest@185d8b6]" name="LoginWithInvalidUserName" duration-ms="1639" started-at="2022-03-27T18:58:55 GST" finished-at="2022-03-27T18:58:56 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginWithInvalidUserName -->
        <test-method status="PASS" signature="LoginWithNoCred()[pri:0, instance:tests.authenticate.AuthFailureTest@185d8b6]" name="LoginWithNoCred" duration-ms="1433" started-at="2022-03-27T18:58:56 GST" finished-at="2022-03-27T18:58:58 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginWithNoCred -->
        <test-method status="PASS" signature="LoginWithNoPassword()[pri:0, instance:tests.authenticate.AuthFailureTest@185d8b6]" name="LoginWithNoPassword" duration-ms="1738" started-at="2022-03-27T18:58:58 GST" finished-at="2022-03-27T18:58:59 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginWithNoPassword -->
        <test-method status="PASS" signature="LoginWithNoUserName()[pri:0, instance:tests.authenticate.AuthFailureTest@185d8b6]" name="LoginWithNoUserName" duration-ms="1435" started-at="2022-03-27T18:58:59 GST" finished-at="2022-03-27T18:59:01 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginWithNoUserName -->
        <test-method status="PASS" signature="after()[pri:0, instance:tests.authenticate.AuthFailureTest@185d8b6]" name="after" is-config="true" duration-ms="0" started-at="2022-03-27T18:59:01 GST" finished-at="2022-03-27T18:59:01 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- tests.authenticate.AuthFailureTest -->
      <class name="tests.booking.DeleteBookingTest">
        <test-method status="PASS" signature="baseTest()[pri:0, instance:tests.booking.DeleteBookingTest@335eadca]" name="baseTest" is-config="true" duration-ms="0" started-at="2022-03-27T18:59:03 GST" finished-at="2022-03-27T18:59:03 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseTest -->
        <test-method status="PASS" signature="init()[pri:0, instance:tests.booking.DeleteBookingTest@335eadca]" name="init" is-config="true" duration-ms="0" started-at="2022-03-27T18:59:03 GST" finished-at="2022-03-27T18:59:03 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="deleteeBooking()[pri:0, instance:tests.booking.DeleteBookingTest@335eadca]" name="deleteeBooking" duration-ms="4630" started-at="2022-03-27T18:59:03 GST" finished-at="2022-03-27T18:59:07 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteeBooking -->
        <test-method status="PASS" signature="after()[pri:0, instance:tests.booking.DeleteBookingTest@335eadca]" name="after" is-config="true" duration-ms="0" started-at="2022-03-27T18:59:07 GST" finished-at="2022-03-27T18:59:07 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- tests.booking.DeleteBookingTest -->
      <class name="tests.authenticate.AuthSuccessTest">
        <test-method status="PASS" signature="baseTest()[pri:0, instance:tests.authenticate.AuthSuccessTest@6f1fba17]" name="baseTest" is-config="true" duration-ms="378" started-at="2022-03-27T18:58:48 GST" finished-at="2022-03-27T18:58:48 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseTest -->
        <test-method status="PASS" signature="init()[pri:0, instance:tests.authenticate.AuthSuccessTest@6f1fba17]" name="init" is-config="true" duration-ms="184" started-at="2022-03-27T18:58:48 GST" finished-at="2022-03-27T18:58:49 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="hasToken()[pri:0, instance:tests.authenticate.AuthSuccessTest@6f1fba17]" name="hasToken" duration-ms="2844" started-at="2022-03-27T18:58:49 GST" finished-at="2022-03-27T18:58:51 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hasToken -->
        <test-method status="PASS" signature="after()[pri:0, instance:tests.authenticate.AuthSuccessTest@6f1fba17]" name="after" is-config="true" duration-ms="1" started-at="2022-03-27T18:58:51 GST" finished-at="2022-03-27T18:58:51 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- tests.authenticate.AuthSuccessTest -->
      <class name="tests.ping.PingVerify">
        <test-method status="PASS" signature="baseTest()[pri:0, instance:tests.ping.PingVerify@eec5a4a]" name="baseTest" is-config="true" duration-ms="0" started-at="2022-03-27T18:59:25 GST" finished-at="2022-03-27T18:59:25 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseTest -->
        <test-method status="PASS" signature="init()[pri:0, instance:tests.ping.PingVerify@eec5a4a]" name="init" is-config="true" duration-ms="1" started-at="2022-03-27T18:59:25 GST" finished-at="2022-03-27T18:59:25 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="pingCheck()[pri:0, instance:tests.ping.PingVerify@eec5a4a]" name="pingCheck" duration-ms="1327" started-at="2022-03-27T18:59:25 GST" finished-at="2022-03-27T18:59:26 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pingCheck -->
        <test-method status="PASS" signature="after()[pri:0, instance:tests.ping.PingVerify@eec5a4a]" name="after" is-config="true" duration-ms="1" started-at="2022-03-27T18:59:26 GST" finished-at="2022-03-27T18:59:26 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- tests.ping.PingVerify -->
      <class name="tests.booking.CreateBookingTest">
        <test-method status="PASS" signature="init()[pri:0, instance:tests.booking.CreateBookingTest@67784306]" name="init" is-config="true" duration-ms="37" started-at="2022-03-27T18:59:01 GST" finished-at="2022-03-27T18:59:01 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="baseTest()[pri:0, instance:tests.booking.CreateBookingTest@67784306]" name="baseTest" is-config="true" duration-ms="0" started-at="2022-03-27T18:59:01 GST" finished-at="2022-03-27T18:59:01 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- baseTest -->
        <test-method status="PASS" signature="createBooking()[pri:0, instance:tests.booking.CreateBookingTest@67784306]" name="createBooking" duration-ms="1884" started-at="2022-03-27T18:59:01 GST" finished-at="2022-03-27T18:59:03 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking -->
        <test-method status="PASS" signature="after()[pri:0, instance:tests.booking.CreateBookingTest@67784306]" name="after" is-config="true" duration-ms="1" started-at="2022-03-27T18:59:03 GST" finished-at="2022-03-27T18:59:03 GST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- tests.booking.CreateBookingTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
